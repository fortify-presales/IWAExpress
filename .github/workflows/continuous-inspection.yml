# Default Continuous Inspection workflow

name: Continuous Inspection

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  # Uncomment the below for CI style build - otherwise Action can only be run manually from GitHUb
  push:
    paths-ignore:
    - .github/workflows/**
    - 'bin/**'
    - 'data/**'
    - 'etc/**'
    - 'media/**'
    - 'Jenkinsfile'
    - '.gitlab-ci.yml'
    - 'README.md'
    - 'LICENSE'
    branches:
    - '**'        # matches every branch
  #pull_request:
  #  branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  Build-And-Test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      
      # Setup required Node.js environment
      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 14.x

      # Run npm install, build and test
      - name: npm install, build, and test
        run: |
          npm install
          MOCHA_FILE=./github-test-results.xml ./node_modules/.bin/mocha tests/** --reporter mocha-junit-reporter

  FoD-SAST-Scan:
    # Use the appropriate runner for building your source code.
    # TODO: Use a Windows runner for .NET projects that use msbuild. Additional changes to RUN commands will be required to switch to Windows syntax.
    runs-on: ubuntu-latest

    steps:
      # Check out source code
      - name: Check Out Source Code
        uses: actions/checkout@v2

      # Java 8 required by ScanCentral Client and FoD Uploader(Univeral CI Tool)
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
            java-version: 1.8

      # Get the branch name
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

         # And run script to check if it exists in FOD
      - name: Verify FOD Release
        shell: pwsh
        run: |
          Write-Output "Installing PowerShellForFOD module ..."
          Install-Module PowerShellForFOD -Scope CurrentUser -Force -Repository PSGallery
          Write-Output "Configuring FOD API $Env:FOD_API_URI or $env.FOD_API_URI ..."
          $PWord = ConvertTo-SecureString -String "$Env:FOD_PAT" -AsPlainText -Force
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "$Env:FOD_TENANT\$Env:FOD_USER", $PWord
          Set-FODConfig -ApiUri $Env:FOD_API_URI -GrantType UsernamePassword -Scope api-tenant
          Get-FODToken -Credential $Credential
          Write-Output "Checking for existence of $Env:GITHUB_BRANCH_NAME release in application $Env:FOD_APPLICATION_NAME"
          # Check if FOD release matching branch name exists and fail if not - we could also create/copy new release.
          if (-not (Test-FODRelease -ApplicationName $Env:FOD_APPLICATION_NAME -ReleaseName $Env:GITHUB_BRANCH_NAME)) { throw "Release $Env:GITHUB_BRANCH_NAME does not exist - please create it!" }
          $ReleaseId = Get-FODReleaseId -ApplicationName $Env:FOD_APPLICATION_NAME -ReleaseName $Env:GITHUB_BRANCH_NAME
          Write-Output "::set-output name=FOD_RELEASE_ID::$ReleaseId"
        id: verify_fod_release
        env:
          FOD_TENANT: ${{ secrets.FOD_TENANT }}
          FOD_USER: ${{ secrets.FOD_USER }}
          FOD_PAT: ${{ secrets.FOD_PAT }}
          FOD_APPLICATION_NAME: "IWAExpress"
          FOD_URL: "https://emea.fortify.com/"
          FOD_API_URI: "https://api.emea.fortify.com/"
          GITHUB_BRANCH_NAME: ${{ steps.extract_branch.outputs.branch }}

      # Prepare source+dependencies for upload. The default example is for a Maven project that uses pom.xml.
      # TODO: Update PACKAGE_OPTS based on the ScanCentral Client documentation for your project's included tech stack(s). Helpful hints:
      #   ScanCentral Client will download dependencies for maven (-bt mvn) and gradle (-bt gradle).
      #   ScanCentral Client can download dependencies for msbuild projects (-bt msbuild); however, you must convert the workflow to use a Windows runner.
      #   ScanCentral has additional options that should be set for PHP and Python projects
      #   For other build tools, add your build commands to download necessary dependencies and prepare according to Fortify on Demand Packaging documentation.
      #   ScanCentral Client documentation is located at https://www.microfocus.com/documentation/fortify-software-security-center/
      - name: Download Fortify ScanCentral Client
        uses: fortify/gha-setup-scancentral-client@v1
      - name: Package Code + Dependencies
        run: scancentral package $PACKAGE_OPTS -o package.zip
        env:
            PACKAGE_OPTS: "-bt none"

      # Start Fortify on Demand SAST scan and wait until results complete. For more information on FoDUploader commands, see https://github.com/fod-dev/fod-uploader-java
      # TODO: Update ENV variables for your application and create the necessary GitHub Secrets.  Helpful hints:
      #   Credentials and release ID should be obtained from your FoD tenant (either Personal Access Token or API Key can be used).
      #   Automated Audit preference should be configured for the release's Static Scan Settings in the Fortify on Demand portal.
      - name: Download Fortify on Demand Universal CI Tool
        uses: fortify/gha-setup-fod-uploader@v1
      - name: Perform SAST Scan
        run: java -jar $FOD_UPLOAD_JAR -z package.zip -aurl $FOD_API_URL -purl $FOD_URL -rid "$FOD_RELEASE_ID" -tc "$FOD_TENANT" -uc "$FOD_USER" "$FOD_PAT" $FOD_UPLOADER_OPTS -n "$FOD_UPLOADER_NOTES"
        env:
            FOD_TENANT: ${{ secrets.FOD_TENANT }}
            FOD_USER: ${{ secrets.FOD_USER }}
            FOD_PAT: ${{ secrets.FOD_PAT }}
            FOD_RELEASE_ID: ${{ steps.verify_fod_release.outputs.FOD_RELEASE_ID }}
            FOD_URL: "https://emea.fortify.com/"
            FOD_API_URL: "https://api.emea.fortify.com/"
            FOD_UPLOADER_OPTS: "-ep 2 -pp 0 -I 1 -apf"
            FOD_UPLOADER_NOTES: 'Triggered by GitHub Actions (${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})'

      # Pull SAST issues from Fortify on Demand and generate GitHub-optimized SARIF output
      - name: Export Results
        uses: fortify/gha-export-vulnerabilities@v1
        with:
          fod_base_url: https://emea.fortify.com
          fod_tenant: ${{ secrets.FOD_TENANT }}
          fod_user: ${{ secrets.FOD_USER }}
          fod_password: ${{ secrets.FOD_PAT }}
          fod_release_id: ${{ steps.verify_fod_release.outputs.FOD_RELEASE_ID }}

      # Check if SARIF output file has been created
      - name: Check file existence
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "./gh-fortify-sast.sarif"

      # Import Fortify SAST results to GitHub Security Code Scanning
      - name: Import Results
        if: steps.check_files.outputs.files_exists == 'true'
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./gh-fortify-sast.sarif

      # Run script to check the results of the scan to determine success/failure
      - name: Check FOD Scan Status
        shell: pwsh
        run: |
          Write-Output "Configuring FOD API $Env:FOD_API_URI or $env.FOD_API_URI ..."
          $PWord = ConvertTo-SecureString -String "$Env:FOD_PAT" -AsPlainText -Force
          $Credential = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList "$Env:FOD_TENANT\$Env:FOD_USER", $PWord
          Set-FODConfig -ApiUri $Env:FOD_API_URI -GrantType UsernamePassword -Scope api-tenant
          Get-FODToken -Credential $Credential
          Write-Output "Checking status of FOD Release $Env:FOD_RELEASE_ID"
          $ScanSummary = Get-FODReleaseScans -ReleaseId $Env:FOD_RELEASE_ID -OrderBy completedDateTime -Limit 1
          $ScanId = $ScanSummary.scanId
          $ReleaseName = $ScanSummary.releaseName
          $ScanStatus = $ScanSummary.analysisStatusType
          $StarRating = $ScanSummary.starRating
          $IssueCountCritical = $ScanSummary.issueCountCritical
          $IssueCountHigh = $ScanSummary.issueCountHigh
          $IssueCountMedium = $ScanSummary.issueCountMedium
          $IssueCountLow = $ScanSummary.issueCountLow
          $TotalIssues = $ScanSummary.issueCountTotal
          Write-Output "Finished scan $ScanId with status '$ScanStatus'"
          Write-Output "Release '$ReleaseName' has a $StarRating star rating"
          Write-Output "Critical Issues:  $IssueCountCritical"
          Write-Output "High Issues:      $IssueCountHigh"
          Write-Output "Medium Issues:    $IssueCountMedium"
          Write-Output "Low Issues:       $IssueCountLow"
          Write-Output "Total Issues:     $IssueCountTotal"
          # Example of using issue data
          #if ($StarRating -lt 2) { exit 1 } # Fail if less than 2 star rating - set to your own criteria
        env:
          FOD_TENANT: ${{ secrets.FOD_TENANT }}
          FOD_USER: ${{ secrets.FOD_USER }}
          FOD_PAT: ${{ secrets.FOD_PAT }}
          FOD_APPLICATION_NAME: "IWAExpress"
          FOD_RELEASE_ID: ${{ steps.verify_fod_release.outputs.FOD_RELEASE_ID }}
          FOD_URL: "https://emea.fortify.com/"
          FOD_API_URI: "https://api.emea.fortify.com/"

  FoD-DAST-Scan:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
